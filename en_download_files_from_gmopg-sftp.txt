@startuml en_download_files_from_gmopg-sftp
skinparam defaultFontName Georgia
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
participant fetch
participant ValidateMD5Checksum
participant GMOPGInteractor
participant SFTPClient
participant GCSInteractor
database "/tmp" as tmp << (L, #ADD1B2) >>
database SFTPServer << (R, #FFBBBB) >>
database GCS << (R, #FFBBBB) >>
database Spanner << (R, #FFBBBB) >>
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

activate fetch
alt#Gold Is the skip flag True?
    note right of fetch: When testing locally, SFTPServer is not used, so the process is skipped.
    fetch -> fetch: Process exit
    return Returns the local request file named "有効性チェック依頼ファイル" specified\nby the `localRequestFilePath` flag in the command arguments.
else
    fetch --> fetch: Continue process
end
fetch -> Spanner: Insert "start" record for the fetch phase
create GMOPGInteractor
fetch -> GMOPGInteractor

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
activate GMOPGInteractor
note right of GMOPGInteractor: local file paths:\n- request file:/tmp/merp_recurringfile_req_YYYYMMDD\n- MD5 checksum:/tmp/merp_recurringfile_req_YYYYMMDD.md5
loop#LightBlue 1, 2 (request file, "MD5 checksum")
    GMOPGInteractor -> GMOPGInteractor: Generate SFTP remote paths and local file paths
    create SFTPClient
    GMOPGInteractor -> SFTPClient
    activate SFTPClient 
    SFTPClient -> tmp: Create a new local file
    SFTPClient -> SFTPServer: Fetch a remote file
    SFTPClient -> SFTPClient: Write file content to local file
    return Return local file path
    deactivate SFTPClient
end
alt#Gold One or more errors occurred while fetching files from SFTPServer
    GMOPGInteractor --> fetch: Return error
else
    GMOPGInteractor --> fetch: Return local file paths of "request file" and "MD5 checksum", continue process
end
deactivate GMOPGInteractor
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

fetch -> ValidateMD5Checksum
!pragma teoz true
box "Validity Check Request File Corruption Check"
    activate ValidateMD5Checksum
    ValidateMD5Checksum -> tmp: Fetch and open "request file" and "MD5 checksum" from local storage
    tmp --> ValidateMD5Checksum: Return files
    ValidateMD5Checksum -> ValidateMD5Checksum: Calculate MD5 checksum of "request file"
    ValidateMD5Checksum -> ValidateMD5Checksum: Compare calculated checksum with "MD5 checksum"
end box
alt#Gold Checksums do not match
    ValidateMD5Checksum --> fetch: Return error
else
    ValidateMD5Checksum --> fetch: Continue process
end
deactivate ValidateMD5Checksum

create GCSInteractor
fetch -> GCSInteractor
activate GCSInteractor
GCSInteractor -> tmp: Fetch "request file" from local storage
tmp --> GCSInteractor: Return a file
GCSInteractor -> GCSInteractor: Generate GCS object path: "cardvaliditycheck/request/dt=YYYY-MM-DD/merp_recurringfile_req_YYYYMMDD"
GCSInteractor -> GCS: Upload
return
deactivate GCSInteractor

fetch -> Spanner: Insert "end" record for the fetch phase

deactivate fetch

@enduml
