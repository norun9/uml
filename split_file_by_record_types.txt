@startuml split_file_by_record_types
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
participant splitFile
participant SplitFileByRecordTypes
database "/tmp" as tmp
database Spanner
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
activate splitFile
splitFile -> splitFile: 「有効性チェック依頼ファイル」のローカルファイルパスを引数から取得
splitFile -> Spanner: フェーズ1(fetch)が終了しているかを確認
alt フェーズ1(fetch)が終了している
    splitFile --> splitFile: 処理続行
else
    splitFile --> splitFile: エラーを返却し、処理終了
end
splitFile -> Spanner: splitFileフェーズ"開始"レコード挿入
splitFile -> SplitFileByRecordTypes
activate SplitFileByRecordTypes
SplitFileByRecordTypes -> tmp: 「ヘッダ」「データ」「トレイラー」「エンド」レコード書き込み用のファイルを新規作成
SplitFileByRecordTypes -> SplitFileByRecordTypes: 各ファイルのWriterを用意
SplitFileByRecordTypes -> SplitFileByRecordTypes: 「有効性チェック依頼ファイル」をOpen、Readerを用意
loop
    SplitFileByRecordTypes -> SplitFileByRecordTypes: 一行読み込み
    alt EOF
        SplitFileByRecordTypes -> SplitFileByRecordTypes: break
    end
    note right of SplitFileByRecordTypes: レコードタイプの判定には文頭の「レコード区分」を用いる
    SplitFileByRecordTypes -> SplitFileByRecordTypes: 行の先頭の文字を取得
    alt レコード区分が「ヘッダ」
        SplitFileByRecordTypes -> SplitFileByRecordTypes: ヘッダ用ファイルに書き込み
    else レコード区分が「データ」
        SplitFileByRecordTypes -> SplitFileByRecordTypes: データ用ファイルに書き込み
    else レコード区分が「トイレラー」
        SplitFileByRecordTypes -> SplitFileByRecordTypes: トレイラー用ファイルに書き込み
    else レコード区分が「エンド」
        SplitFileByRecordTypes -> SplitFileByRecordTypes: エンド用ファイルに書き込み
    else
        SplitFileByRecordTypes --> SplitFileByRecordTypes: break, エラー返却(invalid record section)
    end
end
SplitFileByRecordTypes -> splitFile: 各ファイルのローカルファイルパスを返却
deactivate SplitFileByRecordTypes


deactivate splitFile
@enduml